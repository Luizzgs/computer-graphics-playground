from PIL import Image

# Carregando a imagem em tons de cinza
gray_img = Image.open('exemplo.jpg').convert('L')

# Criando um histograma da imagem em tons de cinza
histogram = gray_img.histogram()

# Número total de pixels na imagem
total_pixels = sum(histogram)

# Inicializando variáveis
sum_pixel = 0
sum_background = 0
weight_pixel = 0
weight_background = 0
variance_between = 0
threshold = 0

# Loop através de todos os valores de intensidade de cinza para encontrar o threshold de Otsu
for i in range(256):
    weight_pixel += histogram[i]
    if weight_pixel == 0:
        continue
    weight_background = total_pixels - weight_pixel
    if weight_background == 0:
        break
    sum_pixel += i * histogram[i]
    mean_pixel = sum_pixel / weight_pixel
    sum_background = sum(histogram) - sum_pixel
    mean_background = sum_background / weight_background
    variance_between = weight_pixel * weight_background * (mean_pixel - mean_background) ** 2
    if variance_between > threshold:
        threshold = variance_between
        optimal_threshold = i

# Convertendo a imagem em preto e branco usando o threshold de Otsu
binary_img = gray_img.point(lambda x: 0 if x < optimal_threshold else 255, '1')

# Salvando a imagem binarizada
binary_img.save('exemplo_binarizado.jpg')
